package nz.ac.auckland.avatar.dto;

import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import nz.ac.auckland.avatar.domain.Address;
import nz.ac.auckland.avatar.domain.Bag;
import nz.ac.auckland.avatar.domain.Curfew;
import nz.ac.auckland.avatar.domain.Category;
import nz.ac.auckland.avatar.domain.Movement;
import nz.ac.auckland.parolee.jaxb.LocalDateAdapter;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/* Class to represent a Avatar. 
 * 
 * An instance of this class represents a DTO Avatar. A DTO Avatar includes
 * a subset of Avatar data, and DTO Parolees objects are exchanged between 
 * clients and the Avatar Web service.
 * 
 * A DTO Avatar is described by:
 * - Personal details: lastname, firstname, gender, date-of-birth, home address;
 * - Curfew: any constraints on the Avatar's location;
 * - Criminal profile: criminal history of the Avatar;
 * - Last know location: timestamped latitude/longitude position.
 * 
 * A Avatar is uniquely identified by an id value of type long.
 * 
 */
@XmlRootElement(name="avatar")
@XmlAccessorType(XmlAccessType.FIELD)
public class Avatar {
	
	@XmlAttribute(name="id")
	private long _id;
	
	@XmlElement(name="user-name")
	private String _username;
	
	@XmlElement(name="first-name")
	private String _firstname;
	
	@XmlElement(name="category")
	private Category _category;
	
	@XmlElement(name="date-of-birth")
	@XmlJavaTypeAdapter(value=LocalDateAdapter.class)
	private LocalDate _dateOfBirth;
	
	@XmlElement(name="home-address")
	private Address _homeAddress;
	
	@XmlElement(name="curfew")
	private Curfew _curfew;
	
	@XmlElement(name="last-known-position")
	private Movement _lastKnownPosition;
	
	@XmlElement(name="bag")
	private Bag _bag;
	
	protected Avatar() {
		
	}
	
	/**
	 * Constructs a DTO Avatar instance. This method is intended to be called
	 * by Web service clients when creating new Avatars. The id field is not 
	 * required because it is generated by the Web service. Similarly, the 
	 * last-known-position field is not required. Of the constructor's 
	 * parameters, all fields must be non-null with the exception of curfew, 
	 * which is optional (not all Avatars are subject to a curfew).
     *
	 */
	public Avatar(String username,
			String firstname,
			Category category,
			LocalDate dateOfBirth,
			Address homeAddress,
			Curfew curfew,
			Bag bag) throws IllegalArgumentException {
		this(0,username,firstname,category,dateOfBirth,homeAddress,curfew, null, bag );
	}
	
	/**
	 * Constructs a DTO Avatar instance. This method should NOT be called by 
	 * Web Service clients. It is intended to be used by the Web Service 
	 * implementation when creating a DTO Avatar from a domain-model Avatar 
	 * object.
	 */
	public Avatar(long id,
			String username,
			String firstname,
			Category category,
			LocalDate dateOfBirth,
			Address homeAddress,
			Curfew curfew,
			Movement lastKnownPosition,
			Bag bag) {
		_id = id;
		_username = username;
		_firstname = firstname;
		_category = category;
		_dateOfBirth = dateOfBirth;
		_homeAddress = homeAddress;
		_curfew = curfew;
		_lastKnownPosition = lastKnownPosition;
		_bag = bag;
	}
	
	public long getId() {
		return _id;
	}
	
	public String getUsername() {
		return _username;
	}
	
	public void setUsername(String username) {
		_username = username;
	}
	
	public String getFirstname() {
		return _firstname;
	}
	
	public void setFirstname(String firstname) {
		_firstname = firstname;
	}
	
	public Category getCategory() {
		return _category;
	}
	
	public void setCategory(Category gender) {
		_category = gender;
	}
	
	public LocalDate getDateOfBirth() {
		return _dateOfBirth;
	}
	
	public void setDateOfBirth(LocalDate dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}
	
	public Address getHomeAddress() {
		return _homeAddress;
	}
	
	public void setHomeAddress(Address homeAddress) {
		_homeAddress = homeAddress;
	}
	
	public Curfew getCurfew() {
		return _curfew;
	}
	
	public void setCurfew(Curfew curfew) {
		_curfew = curfew;
	}
	
	public Movement getLastKnownPosition() {
		return _lastKnownPosition;
	}
	
	public Bag getBag() {
		return _bag;
	}
	
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();
		
		DateTimeFormatter dOfBFormatter = DateTimeFormat.forPattern("dd/MM/yyyy");
		DateTimeFormatter timeFormatter = DateTimeFormat.forPattern("HH:mm");
		
		buffer.append("Avatar: { [");
		buffer.append(_id);
		buffer.append("]; ");
		if(_username != null) {
			buffer.append(_username);
			buffer.append(", ");
		}
		if(_firstname != null) {
			buffer.append(_firstname);
		}
		buffer.append("; ");
		if(_category != null) {
			buffer.append(_category);
		}
		buffer.append("; ");
		
		if(_dateOfBirth != null) {
			buffer.append(dOfBFormatter.print(_dateOfBirth));
		}
		buffer.append("\n  ");
		if(_homeAddress != null) {
			buffer.append(_homeAddress);
		}
		
		buffer.append("\n  ");
		if(_curfew != null) {
			buffer.append("\n  Curfew from ");
			buffer.append(timeFormatter.print(_curfew.getStartTime()));
			buffer.append(" to ");
			buffer.append(timeFormatter.print(_curfew.getEndTime()));
			buffer.append(" @ ");
			
			if(_homeAddress != null && _homeAddress.equals(_curfew.getConfinementAddress())) {
				buffer.append("home");
			} else {
				buffer.append(_curfew.getConfinementAddress());
			}
		} else {
			buffer.append("No curfew conditions");
		}
		buffer.append("\n  ");
		if(_bag != null) {
			buffer.append(_bag);
		} else {
			buffer.append("Not holding any items at present");
		}
		buffer.append(" }");
		
		return buffer.toString();
	}
	
	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Avatar))
            return false;
        if (obj == this)
            return true;

        Avatar ava = (Avatar) obj;
        return new EqualsBuilder().
            append(_id, ava._id).
            append(_username, ava._username).
            append(_firstname, ava._firstname).
            append(_category, ava._category).
            append(_dateOfBirth, ava._dateOfBirth).
            append(_homeAddress, ava._homeAddress).
            append(_bag, ava._bag).
            isEquals();
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 31). 
	            append(_id).
	            append(_username).
	            append(_firstname).
	            append(_category).
	            append(_dateOfBirth).
	            append(_homeAddress).
	            append(_bag).
	            toHashCode();
	}
}


